// Code generated by optiongen. DO NOT EDIT.
// optiongen: github.com/timestee/optiongen

package redis

import (
	"sync/atomic"
	"unsafe"
)

// Conf should use NewConf to initialize it
type Conf struct {
	Addrs        []string `xconf:"addrs" usage:"Redis地址列表"`
	Cluster      bool     `xconf:"cluster" usage:"是否为Redis集群，默认为false，集群需要设置为true"`
	MasterName   string   `xconf:"master_name" usage:"哨兵模式master名"`
	KeySizes     []int    `xconf:"key_sizes" usage:"key的大小"`
	ValueSizes   []int    `xconf:"value_sizes" usage:"value的大小"`
	PoolSizes    []int    `xconf:"pool_sizes" usage:"连接池的大小"`
	Parallelisms []int    `xconf:"parallelisms" usage:"并发"`
}

// NewConf new Conf
func NewConf(opts ...ConfOption) *Conf {
	cc := newDefaultConf()
	for _, opt := range opts {
		opt(cc)
	}
	if watchDogConf != nil {
		watchDogConf(cc)
	}
	return cc
}

// ApplyOption apply multiple new option and return the old ones
// sample:
// old := cc.ApplyOption(WithTimeout(time.Second))
// defer cc.ApplyOption(old...)
func (cc *Conf) ApplyOption(opts ...ConfOption) []ConfOption {
	var previous []ConfOption
	for _, opt := range opts {
		previous = append(previous, opt(cc))
	}
	return previous
}

// ConfOption option func
type ConfOption func(cc *Conf) ConfOption

// WithAddrs Redis地址列表
func WithAddrs(v ...string) ConfOption {
	return func(cc *Conf) ConfOption {
		previous := cc.Addrs
		cc.Addrs = v
		return WithAddrs(previous...)
	}
}

// WithCluster 是否为Redis集群，默认为false，集群需要设置为true
func WithCluster(v bool) ConfOption {
	return func(cc *Conf) ConfOption {
		previous := cc.Cluster
		cc.Cluster = v
		return WithCluster(previous)
	}
}

// WithMasterName 哨兵模式master名
func WithMasterName(v string) ConfOption {
	return func(cc *Conf) ConfOption {
		previous := cc.MasterName
		cc.MasterName = v
		return WithMasterName(previous)
	}
}

// WithKeySizes key的大小
func WithKeySizes(v ...int) ConfOption {
	return func(cc *Conf) ConfOption {
		previous := cc.KeySizes
		cc.KeySizes = v
		return WithKeySizes(previous...)
	}
}

// WithValueSizes value的大小
func WithValueSizes(v ...int) ConfOption {
	return func(cc *Conf) ConfOption {
		previous := cc.ValueSizes
		cc.ValueSizes = v
		return WithValueSizes(previous...)
	}
}

// WithPoolSizes 连接池的大小
func WithPoolSizes(v ...int) ConfOption {
	return func(cc *Conf) ConfOption {
		previous := cc.PoolSizes
		cc.PoolSizes = v
		return WithPoolSizes(previous...)
	}
}

// WithParallelisms 并发
func WithParallelisms(v ...int) ConfOption {
	return func(cc *Conf) ConfOption {
		previous := cc.Parallelisms
		cc.Parallelisms = v
		return WithParallelisms(previous...)
	}
}

// InstallConfWatchDog the installed func will called when NewConf  called
func InstallConfWatchDog(dog func(cc *Conf)) { watchDogConf = dog }

// watchDogConf global watch dog
var watchDogConf func(cc *Conf)

// newDefaultConf new default Conf
func newDefaultConf() *Conf {
	cc := &Conf{}

	for _, opt := range [...]ConfOption{
		WithAddrs([]string{"127.0.0.1:6379"}...),
		WithCluster(false),
		WithMasterName(""),
		WithKeySizes([]int{16}...),
		WithValueSizes([]int{64, 256, 1024}...),
		WithPoolSizes([]int{10, 100, 1000}...),
		WithParallelisms([]int{1, 8, 16, 32}...),
	} {
		opt(cc)
	}

	return cc
}

// AtomicSetFunc used for XConf
func (cc *Conf) AtomicSetFunc() func(interface{}) { return AtomicConfSet }

// atomicConf global *Conf holder
var atomicConf unsafe.Pointer

// onAtomicConfSet global call back when  AtomicConfSet called by XConf.
// use ConfInterface.ApplyOption to modify the updated cc
// if passed in cc not valid, then return false, cc will not set to atomicConf
var onAtomicConfSet func(cc ConfInterface) bool

// InstallCallbackOnAtomicConfSet install callback
func InstallCallbackOnAtomicConfSet(callback func(cc ConfInterface) bool) { onAtomicConfSet = callback }

// AtomicConfSet atomic setter for *Conf
func AtomicConfSet(update interface{}) {
	cc := update.(*Conf)
	if onAtomicConfSet != nil && !onAtomicConfSet(cc) {
		return
	}
	atomic.StorePointer(&atomicConf, (unsafe.Pointer)(cc))
}

// AtomicConf return atomic *ConfVisitor
func AtomicConf() ConfVisitor {
	current := (*Conf)(atomic.LoadPointer(&atomicConf))
	if current == nil {
		defaultOne := newDefaultConf()
		if watchDogConf != nil {
			watchDogConf(defaultOne)
		}
		atomic.CompareAndSwapPointer(&atomicConf, nil, (unsafe.Pointer)(defaultOne))
		return (*Conf)(atomic.LoadPointer(&atomicConf))
	}
	return current
}

// all getter func
func (cc *Conf) GetAddrs() []string     { return cc.Addrs }
func (cc *Conf) GetCluster() bool       { return cc.Cluster }
func (cc *Conf) GetMasterName() string  { return cc.MasterName }
func (cc *Conf) GetKeySizes() []int     { return cc.KeySizes }
func (cc *Conf) GetValueSizes() []int   { return cc.ValueSizes }
func (cc *Conf) GetPoolSizes() []int    { return cc.PoolSizes }
func (cc *Conf) GetParallelisms() []int { return cc.Parallelisms }

// ConfVisitor visitor interface for Conf
type ConfVisitor interface {
	GetAddrs() []string
	GetCluster() bool
	GetMasterName() string
	GetKeySizes() []int
	GetValueSizes() []int
	GetPoolSizes() []int
	GetParallelisms() []int
}

// ConfInterface visitor + ApplyOption interface for Conf
type ConfInterface interface {
	ConfVisitor
	ApplyOption(...ConfOption) []ConfOption
}
